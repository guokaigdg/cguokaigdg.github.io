<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-08-09T00:12:24+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">佩奇の家</title><subtitle>JUST DO IT</subtitle><author><name>true</name></author><entry><title type="html">键盘修改映射</title><link href="http://localhost:4000/2020/08/08/key.html" rel="alternate" type="text/html" title="键盘修改映射" /><published>2020-08-08T20:00:21+08:00</published><updated>2020-08-08T20:00:21+08:00</updated><id>http://localhost:4000/2020/08/08/key</id><content type="html" xml:base="http://localhost:4000/2020/08/08/key.html">&lt;h1 id=&quot;键盘修改映射&quot;&gt;键盘修改映射&lt;/h1&gt;

&lt;p&gt;下面进行修改&lt;/p&gt;

&lt;p&gt;使用软件为 Karabiner&lt;/p&gt;

&lt;p&gt;默认的上下左右键比较难按，所以设置为左边 Control 键跟 WSAD 键，比较人性化。
默认的 Control+A 为 行首，Control+&lt;/p&gt;

&lt;p&gt;功能描述 原键位 映射键位
L_Control+WSAD 对应上下左右键 L_Control+W/S/A/D 上下左右键
L_Control+Q 对应 Control+A L_Control+Q Control+A
L_Option 转 L_Command L_Option L_Command
L_Command 转 R_Option L_Command R_Option
R_Option 转 R_Command R_Option R_Command
看上边表格比较费劲，下面就上配置图吧&lt;/p&gt;

&lt;p&gt;上边二张图可以直接在软件中修改成如图所示，下面这张图要在配置文件中设置&lt;/p&gt;

&lt;p&gt;设置方法如下：
进入到~/.config/karabiner/assets/complex_modifications，创建一个 my.json
将下面代码复制进去&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;My vim style like arrow key control&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;rules&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;L_Control + q to L_Control + a &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;manipulators&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;from&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;key_code&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;q&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;modifiers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;mandatory&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;left_control&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;optional&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;any&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;to&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;key_code&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;modifiers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;left_control&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;basic&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;L_Control + w/a/s/d to arrows&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;manipulators&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;from&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;key_code&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;w&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;modifiers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;mandatory&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;left_control&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;optional&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;any&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;to&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;key_code&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;up_arrow&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;basic&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;from&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;key_code&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;modifiers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;mandatory&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;left_control&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;optional&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;any&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;to&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;key_code&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;left_arrow&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;basic&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;from&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;key_code&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;modifiers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;mandatory&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;left_control&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;optional&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;any&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;to&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;key_code&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;down_arrow&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;basic&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;from&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;key_code&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;modifiers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;mandatory&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;left_control&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;optional&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;any&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;to&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;key_code&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;right_arrow&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;basic&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>ma_meng</name></author><category term="HHKB" /><summary type="html">键盘修改映射</summary></entry><entry><title type="html">HTML5的元素嵌套规则</title><link href="http://localhost:4000/2020/01/01/heml5.html" rel="alternate" type="text/html" title="HTML5的元素嵌套规则" /><published>2020-01-01T20:00:21+08:00</published><updated>2020-01-01T20:00:21+08:00</updated><id>http://localhost:4000/2020/01/01/heml5</id><content type="html" xml:base="http://localhost:4000/2020/01/01/heml5.html">&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;html5-的元素嵌套规则&quot;&gt;HTML5 的元素嵌套规则&lt;/h1&gt;

&lt;p&gt;先来看以下这样一段代码：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
   &amp;lt;li&amp;gt;&amp;lt;h4&amp;gt;&amp;lt;a href=&quot;&quot;&amp;gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/h4&amp;gt;&amp;lt;/li&amp;gt;
 &amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;html4xhtml-的嵌套规则&quot;&gt;HTML4/XHTML 的嵌套规则&lt;/h1&gt;

&lt;p&gt;在我们的印象中会有这样的嵌套规则：&lt;/p&gt;

&lt;p&gt;html4, 内联元素不能嵌套块元素&amp;lt;p&amp;gt;元素和&amp;lt;h1~6&amp;gt;元素不能嵌套块元素, 那么到底什么是块元素，什么是内联元素？ 以下是 W3C CSS2.1 规范中对块元素和内联元素的定义：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Block-level elements are those elements of the source document that are formatted visually as blocks (e.g., paragraphs). The following values of the ‘display’ property make an element block-level: ‘block’, ‘list-item’, and ‘table’.
Inline-level elements are those elements of the source document that do not form new blocks of content; the content is distributed in lines (e.g., emphasized pieces of text within a paragraph, inline images, etc.). The following values of the ‘display’ property make an element inline-level: ‘inline’, ‘inline-table’, and ‘inline-block’. Inline-level elements generate inline-level boxes, which are boxes that participate in an inline formatting context.
我们可以这样理解：块元素一般都从新行开始，内联元素在一行内显示，我们也可以通过 CSS 属性 display 的’inline’ 或 ‘ block’ 来改变元素为内联元素或块元素，当然这是 CSS 中对元素的分类，显然用 ‘display’ 的属性值来对 html 元素进行分类是不严谨的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;如果按照上述规则来讲，那么 FACEBOOK 的做法就是一种错误的做法，因为他在内联元素&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;a&amp;gt;&lt;/code&gt;元素中嵌套了块元素元素&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt;，但是细心的读者应该会发现上述规则是基于 HTML4/xHTML1 的 strict 模式，而 FACEBOOK 现在已经统一使用了 html5 的 doctype，那么这个规则到底还是是否适用？&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;html5-的元素嵌套规则-1&quot;&gt;HTML5 的元素嵌套规则&lt;/h1&gt;

&lt;p&gt;元素的嵌套规则和页面头部申明的 DTD 有着千丝万缕的关系，DTD 基础请查看我之前写的文章《DTD 详解》，那么在最新的 HTML5 规范中是否对元素嵌套有着新的规范呢？&lt;/p&gt;

&lt;p&gt;让我们先了解下 W3C 在最新的 HTML5 规范中对元素的分类方式：&lt;/p&gt;

&lt;p&gt;w3c html5 content&lt;/p&gt;

&lt;p&gt;如上图，元素的分类不再是块元素或内联元素这样来分类（其实从来就没有这样分），而是按照如下分类来分：Flow（流式元素）、Heading（标题元素）、Sectioning（章节元素）、Phrasing（段落元素）、Embedded（嵌入元素）、Interactive（交互元素）、Metadata（元数据元素）。&lt;/p&gt;

&lt;h2 id=&quot;flow流式元素&quot;&gt;Flow（流式元素）&lt;/h2&gt;

&lt;p&gt;在应用程序和文档的主体部分中使用的大部分元素都被分类为流式元素。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;a， abbr， address， area（如果它是map元素的后裔）， article， aside， audio， b， bdi， bdo， blockquote， br， button， canvas， cite， code， command， datalist， del， details， dfn， div， dl，em， embed， fieldset， figure， footer， form， h1， h2， h3， h4， h5， h6， header， hgroup， hr， i， iframe， img， input， ins， kbd， keygen， label， map， mark， math， menu， meter，nav， noscript， object， ol， output， p， pre， progress， q， ruby， s， samp， script， section， select， small， span， strong， style（如果该元素设置了scoped属性）， sub， sup， svg， table，textarea， time， u， ul， var， video， wbr， text
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;heading标题元素&quot;&gt;Heading（标题元素）&lt;/h2&gt;

&lt;p&gt;标题式元素定义一个区块/章节（section）（无论是明确的使用章节式内容的元素标记，或者标题式内容自身所隐含的）的标题。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;h1， h2， h3， h4， h5， h6， hgroup
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;sectioning章节元素&quot;&gt;Sectioning（章节元素）&lt;/h2&gt;

&lt;p&gt;章节式元素是用于定义标题及页脚范围的元素。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;article， aside， nav， section
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;phrasing段落元素&quot;&gt;Phrasing（段落元素）&lt;/h2&gt;

&lt;p&gt;段落式元素是文档中的文本、标记段落级文本的元素。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;a（如果其只包含段落式元素）， abbr， area（如果它是 map 元素的后裔）， audio， b， bdi， bdo， br， button， canvas， cite， code， command， datalist， del（如果其只包含段落式元素）， dfn， em， embed， i，iframe， img， input， ins（如果其只包含段落式元素）， kbd， keygen， label， map（如果其只包含段落式元素）， mark， math， meter， noscript， object， output， progress， q， ruby， s， samp， script，select， small， span， strong， sub， sup， svg， textarea， time， u， var， video， wbr， text
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;embedded嵌入元素&quot;&gt;Embedded（嵌入元素）&lt;/h2&gt;

&lt;p&gt;嵌入式元素是引用或插入到文档中其他资源的元素。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
audio， canvas， embed， iframe， img， math， object， svg， video
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;interactive交互元素&quot;&gt;Interactive（交互元素）&lt;/h2&gt;

&lt;p&gt;交互式元素是专门用于与用户交互的元素。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;a， audio（如果设置了 controls 属性）， button， details， embed， iframe， img（如果设置了 usemap 属性）， input（如果 type 属性不为 hidden 状态）， keygen， label， menu（如果 type 属性为 toolbar 状态），object（如果设置了 usemap 属性）， select， textarea， video（如果设置了 controls 属性）
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;metadata元数据元素&quot;&gt;Metadata（元数据元素）&lt;/h2&gt;

&lt;p&gt;元数据元素是可以被用于说明其他内容的表现或行为，或者在当前文档和其他文档之间建立联系的元素&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;base，command，link，meta，noscript，script，style，title
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;各分类会有交叉或重叠的现象，这说明在 html5 中，元素可能属于上述所有分类中的一个或多个。&lt;/p&gt;

&lt;p&gt;例子(1)：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;h1&amp;gt; ~ &amp;lt;h6&amp;gt;&lt;/code&gt;元素：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Categories:
Flow content.
Heading content.
Palpable content.
Contexts in which this element can be used:
As a child of an hgroup element.
Where flow content is expected.
Content model:
Phrasing content.
其中的「Categories」说明该元素的类别，「Contexts in which this element can be used」说明该元素能在何种场景下被使用，也就是它的父元素是什么，「Content model」说明该元素可以包含的内容是什么，由于页面中的元素是层层嵌套的，一个元素有可能既是父元素同时也是子元素的角色，所以下面我们以「Content model」也就是可包含的子元素做讨论。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;那么对于 h1~h6 元素：&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;它们同时属于 Flow content 、Heading content 和 Palpable content 三个分类, 它们的父元素可以是&amp;lt;hgroup&amp;gt;，同时那些子元素是流式元素的元素也可以作为 h1-h6 元素的父元素 它们允许的子元素是段落式元素
例子(2)：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt;元素&lt;/p&gt;

&lt;p&gt;Categories:
Flow content.
Palpable content.
Contexts in which this element can be used:
Where phrasing content is expected.
Content model:
Flow content.
对于&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt;元素：&lt;/p&gt;

&lt;p&gt;同时属于 Flow content 、 Palpable content 分类
父元素必须是那些子元素为段落式元素的元素
允许的子元素是流式元素&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt;元素允许的子元素是流式元素，流式元素基本涵括了页面中的大部分元素，所以我们在用&amp;lt;div&amp;gt;时可以不用担心嵌套错误的问题。&lt;/p&gt;

&lt;p&gt;但对于&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;h1&amp;gt;~&amp;lt;h6&amp;gt;&lt;/code&gt;元素，它们允许的子元素为段落式元素，而段落式元素并不包含诸如&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;、&amp;lt;p&amp;gt;、&amp;lt;ul&amp;gt;&amp;lt;ol&amp;gt;&lt;/code&gt;之类的元素，这就说明按照 html5 的规范，是不允许在标题元素内部嵌入&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;、&amp;lt;p&amp;gt;、&amp;lt;ul&amp;gt;&amp;lt;ol&amp;gt;&lt;/code&gt;之类的元素。&lt;/p&gt;

&lt;p&gt;例子(3)：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;a&amp;gt;&lt;/code&gt;元素&lt;/p&gt;

&lt;p&gt;Categories:
Flow content.
Phrasing content.
Interactive content.
Palpable content.
Contexts in which this element can be used:
Where phrasing content is expected.
Content model:
Transparent, but there must be no interactive content descendant.
对于&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;a&amp;gt;&lt;/code&gt;元素：&lt;/p&gt;

&lt;p&gt;同时属于 Flow content 、 Phrasing content、Interactive content、Palpable content 分类
父元素必须是那些子元素为段落式元素的元素
允许的子元素是以它的父元素允许的子元素为准，但不能包含交互式元素
这样看&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;a&amp;gt;&lt;/code&gt;元素还是挺有意思的，允许的子元素要看它的父元素所能包含的子元素。&lt;/p&gt;

&lt;p&gt;再来看文章开头中提到的代码&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;lt;ul&amp;gt;
   &amp;lt;li&amp;gt;&amp;lt;h4&amp;gt;&amp;lt;a href=&quot;&quot;&amp;gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/h4&amp;gt;&amp;lt;/li&amp;gt;
 &amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这时&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;a&amp;gt;&lt;/code&gt;的父元素为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;h4&amp;gt;&lt;/code&gt;，对于&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;h1&amp;gt;~&amp;lt;h6&amp;gt;&lt;/code&gt;的标题元素上面已经提过，允许的子元素是段落式元素，那么此时对于&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;a&amp;gt;&lt;/code&gt;允许的子元素即为段落式元素，而段落式元素中是不包含&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt;元素的，所以 FCAEBOOK 这样的嵌套方法是错误的！&lt;/p&gt;

&lt;p&gt;让我们来把代码做一下修改：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
   &amp;lt;li&amp;gt;&amp;lt;div&amp;gt;&amp;lt;a href=&quot;&quot;&amp;gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/li&amp;gt;
 &amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这时&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;a&amp;gt;&lt;/code&gt;的父元素为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt;，而&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt;元素允许的子元素是流式元素，流式元素中包含&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt;元素，所以这样的情形下在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;a&amp;gt;&lt;/code&gt;里面嵌套&amp;lt;div&amp;gt;就是正确的做法！&lt;/p&gt;

&lt;p&gt;嵌套错误可能引起的问题&lt;/p&gt;

&lt;p&gt;上面讲了 HTML5 对元素新的分类方式和以&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;h1&amp;gt;~&amp;lt;h6&amp;gt;、&amp;lt;div&amp;gt;、&amp;lt;a&amp;gt;&lt;/code&gt;元素举例讲述了各自的嵌套规则，但 FACEBOOK 即使不按照标准去嵌套也不会有大的错误问题，这就给我们带来了一个思考：嵌套错误到底会不会有问题？&lt;/p&gt;

&lt;p&gt;例子(1)：开始与结束标签嵌套错误&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;div&amp;gt;
    &amp;lt;h2&amp;gt;
       内容
    &amp;lt;/div&amp;gt;
&amp;lt;/h2&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;测试结果：&lt;/p&gt;

&lt;p&gt;element11&lt;/p&gt;

&lt;p&gt;例子(2)：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;p&amp;gt;元素嵌套&amp;lt;div&amp;gt;元素
&amp;lt;p&amp;gt;&amp;lt;div&amp;gt;内容&amp;lt;/div&amp;gt;&amp;lt;/p&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;测试结果：&lt;/p&gt;

&lt;p&gt;element12&lt;/p&gt;

&lt;p&gt;例子(3)：列表元素&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;li&amp;gt;兄弟元素为&amp;lt;div&amp;gt;

&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;内容&amp;lt;/li&amp;gt;&amp;lt;div&amp;gt;内容&amp;lt;/div&amp;gt;&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;测试结果：&lt;/p&gt;

&lt;p&gt;例子(4)：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;h2&amp;gt;元素嵌套&amp;lt;div&amp;gt;元素

&amp;lt;h2&amp;gt;&amp;lt;div&amp;gt;内容&amp;lt;/div&amp;gt;&amp;lt;/h2&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;测试结果：&lt;/p&gt;

&lt;p&gt;例子(5)：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;a&amp;gt;&lt;/code&gt;元素嵌&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;a&amp;gt;&lt;/code&gt;元素&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;a href=&quot;&quot;&amp;gt;&amp;lt;a href=&quot;&quot;&amp;gt;内容&amp;lt;/a&amp;gt;&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;测试结果：&lt;/p&gt;

&lt;p&gt;element15&lt;/p&gt;

&lt;p&gt;通过上述例子，我们总结如下：&lt;/p&gt;

&lt;p&gt;元素开始与结束标签嵌套错误，页面可以在大部分浏览器被正常解析，IE9 会出现解析错误
在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;p&amp;gt;&lt;/code&gt;元素内嵌入&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt;等元素造成所有浏览器的解析错误
在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;h1&amp;gt;~&amp;lt;h6&amp;gt;&lt;/code&gt;元素内嵌入&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt;等元素所有浏览器可以解析正常
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;a&amp;gt;元素内嵌&amp;lt;a&amp;gt;&lt;/code&gt;元素会导致所有浏览器的解析错误
在列表元素&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;dt&amp;gt;&amp;lt;dd&amp;gt;&lt;/code&gt;等插入非列表兄弟元素会导致 IE6\IE7 的解析错误
其实，这里说解析错误并不是很合理，应该是说浏览器解析出来的结果和我们期望的结果不一致，但任何的嵌套错误都不会导致页面呈现有很大的出错。&lt;/p&gt;

&lt;p&gt;我们知道 JS 代码如果写的有语法错误，浏览器的 JS 解释器就会拒绝执行并且报错，而浏览器在遇到不符合语法规定的 HTML 代码时则会千方百计将其呈现出来。&lt;/p&gt;

&lt;p&gt;严格嵌套约束、语义嵌套约束
通过上面的示例我们发现在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;p&amp;gt;&lt;/code&gt;元素里嵌套&amp;lt;div&amp;gt;元素或&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;a&amp;gt;元素&amp;lt;a&amp;gt;&lt;/code&gt;元素会导致所有的浏览器都解析错误，这其实是 W3C 规范的严格嵌套约束，严格嵌套约束要求必须去遵守，不然就会导致所有浏览器的解析错误。&lt;/p&gt;

&lt;p&gt;严格嵌套约束规则：&lt;/p&gt;

&lt;p&gt;a 元素里不可以嵌套交互式元素&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;a&amp;gt;、&amp;lt;button&amp;gt;、&amp;lt;select&amp;gt;&lt;/code&gt;等)&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;p&amp;gt;&lt;/code&gt;里面不可以嵌套&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;、&amp;lt;h1&amp;gt;~&amp;lt;h6&amp;gt;、&lt;/code&gt;&amp;lt;p&amp;gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;、&amp;lt;ul&amp;gt;/&amp;lt;ol&amp;gt;/&amp;lt;li&amp;gt;、&amp;lt;dl&amp;gt;/&amp;lt;dt&amp;gt;/&amp;lt;dd&amp;gt;、&amp;lt;form&amp;gt;&lt;/code&gt;等
暂时没有发现更多，有的欢迎告诉我
语义嵌套约束：&lt;/p&gt;

&lt;p&gt;每个元素基本都有自己的嵌套规则（即父元素可以是什么，子元素可以是什么），除了严格嵌套约束之外的一些规则就是语义嵌套约束，对于语义嵌套约束，如果不遵守，页面可能正常，但也可能解析错误，这和下面要讲的容错机制有关。&lt;/p&gt;

&lt;p&gt;浏览器的容错机制&lt;/p&gt;

&lt;p&gt;并不是每位同学在写完页面后去做合法性检查，因此浏览器厂商不得不让它们的浏览器以尽可能宽松的方式去处理网页，每个浏览器内核中都有相当一部分代码专门用来处理那些含糊不清的 html 标记及嵌套，并且会去猜测前端们到底想如何呈现网页，这是浏览器的容错机制。&lt;/p&gt;

&lt;p&gt;这其实在告诉我们，我们写出来的 HTML 代码不符合 W3C 规范可能最终呈现出来没有异样，但那其实是浏览器的一种容错机制，我们没有理由让自己以一个随性的态度去 coding，对待自己的代码应该一丝不苟，即使 HTML5 的胸襟很宽广。&lt;/p&gt;

&lt;p&gt;拥抱 WEB 标准&lt;/p&gt;

&lt;p&gt;原本我们认为从 HTML4 到 XHTML 是一个时代，现在又从 XHTML 跨到了 HTML5，新时代新标准的诞生，我们应该敞开胸怀去拥抱，而不是排斥。&lt;/p&gt;

&lt;p&gt;你关注或不关注，标准就在那里，只增不减。我们应该感谢 W3C 这样一个组织，让各个浏览器厂商抛开彼此的敌意共同制定新的标准。不然，也许你会像 90 年代那样，JS 引用一个元素都需要为某个浏览器写一套自己的代码。&lt;/p&gt;

&lt;p&gt;WEB 标准只会使我们吃饭变得更香，睡眠变得更好，新的技术或标准会推动我们去富有热情的 coding，而不是每天在重复劳动。&lt;/p&gt;</content><author><name>ma_meng</name></author><category term="HTML5" /><category term="标签" /><summary type="html"></summary></entry><entry><title type="html">Material-UI</title><link href="http://localhost:4000/2020/01/01/material-UI.html" rel="alternate" type="text/html" title="Material-UI " /><published>2020-01-01T20:00:21+08:00</published><updated>2020-01-01T20:00:21+08:00</updated><id>http://localhost:4000/2020/01/01/material-UI</id><content type="html" xml:base="http://localhost:4000/2020/01/01/material-UI.html">&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200105182046604.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b2thaWdkZw==,size_16,color_FFFFFF,t_70&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;说明&quot;&gt;说明&lt;/h1&gt;

&lt;p&gt;Material-UI —— 世界上最受欢迎的 React UI 框架。&lt;/p&gt;

&lt;h1 id=&quot;安装-material-ui&quot;&gt;安装 Material-UI&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;📦 安装&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 用 npm 安装
npm install @material-ui/core

// 用 yarn 安装
yarn add @material-ui/core
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;安装-material-uiicons&quot;&gt;安装 material-ui/icons&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;📦 安装&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install @material-ui/icons
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/@material-ui/icons&quot;&gt;@material-ui/icons&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://material-ui.com/zh/components/material-icons/&quot;&gt;Material Icons - Material-UI&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;安装-material-design-icons&quot;&gt;安装 material-design-icons&lt;/h1&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;lt;Icon&amp;gt;star&amp;lt;/Icon&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install material-design-icons
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;字形&quot;&gt;字形：&lt;/h1&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm install typeface-roboto --save
// entry.js
import 'typeface-roboto'

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;图标库-xxxx&quot;&gt;图标库 &lt;Icon&gt;XXXX&lt;/Icon&gt;&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;以下网址选图标, 注意一定要从下面选， 因为引入的是这个图标库&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://material.io/resources/icons/?style=baseline&quot;&gt;Tools&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;官方文档&quot;&gt;官方文档&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/material-design-icons-iconfont&quot;&gt;material-design-icons-iconfont&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//安装
npm install material-design-icons-iconfont --save
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;引入&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import 'material-design-icons-iconfont/dist/material-design-icons.css'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;使用&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;方法一&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&amp;lt;i className=&quot;material-icons&quot;&amp;gt;face&amp;lt;/i&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;方法二&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
import Icon from &quot;@material-ui/core/Icon&quot;;
&amp;lt;Icon &amp;gt;backup&amp;lt;/Icon&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;修改样式&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;Icon style={}&amp;gt;{item.icon}&amp;lt;/Icon&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;material-uistyles&quot;&gt;Material-UI/Styles&lt;/h1&gt;

&lt;h2 id=&quot;说明-1&quot;&gt;说明：&lt;/h2&gt;

&lt;p&gt;使用 Jss 语法，将 css 写进 js 文件中，实现很多新功能，你如 theme nesting（主题嵌套），dynamic styles(动态模式)self-support（自我支持） 等等…&lt;/p&gt;

&lt;h2 id=&quot;优点&quot;&gt;&lt;strong&gt;优点：&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;💅 具备 styled-components 的  &lt;a href=&quot;https://www.styled-components.com/docs/basics#motivation&quot;&gt;优势&lt;/a&gt;。&lt;/li&gt;
  &lt;li&gt;🚀 速度快&lt;/li&gt;
  &lt;li&gt;🧩 可通过&lt;a href=&quot;https://github.com/cssinjs/jss/blob/master/docs/plugins.md&quot;&gt;插件&lt;/a&gt;API 扩展。&lt;/li&gt;
  &lt;li&gt;⚡️ 它使用  &lt;a href=&quot;https://github.com/cssinjs/jss&quot;&gt;JSS&lt;/a&gt;  作为其核心 它在运行时和服务器端工作。&lt;/li&gt;
  &lt;li&gt;📦 大小不超&lt;a href=&quot;https://bundlephobia.com/result?p=@material-ui/styles&quot;&gt;15 KB&lt;/a&gt; ， 跟 Material-UI 一起使用不会增加体积&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;官方文档-1&quot;&gt;官方文档：&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://material-ui.com/zh/styles/basics/#%E5%AE%89%E8%A3%85&quot;&gt;@material-ui/styles - Material-UI&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;vscode-插件支持-jss-语法&quot;&gt;vscode 插件，支持 jss 语法&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;插件名称：Emmet JSS&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;使用方式&quot;&gt;使用方式&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;一共有&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;三种&lt;/code&gt;使用方式， 以下介绍 hook 的使用&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Hook API (钩子函数)&lt;/li&gt;
  &lt;li&gt;Styled components API （样式化的组件 ）&lt;/li&gt;
  &lt;li&gt;Higher-order component API （高阶组件）&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;hook-api&quot;&gt;Hook API&lt;/h2&gt;

&lt;h3 id=&quot;1安装&quot;&gt;1.&lt;strong&gt;安装&lt;/strong&gt;&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    // 用npm安装
    npm install @material-ui/styles

    // 用yarn安装
    yarn add @material-ui/styles

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;2使用-hook-api-方式&quot;&gt;2.&lt;strong&gt;使用( HOOK API 方式）&lt;/strong&gt;&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    **第一步**： import { makeStyles } from '@material-ui/core/styles';

    **第二步**： const useStyles = makeStyles({
    					  root: {
    					    color: 'white',
    					    height: 48,
    							...
    					  },
    					});

    **第三步**：const classes = useStyles();

    **第四步**：className={classes.root}


    import React from 'react';
    import { makeStyles } from '@material-ui/core/styles';  //**第一步**
    import Button from '@material-ui/core/Button';

    const useStyles = makeStyles({   //**第二步**
      root: {
        background: 'rgba(255, 105, 135, .3)',
        height: 48,
        padding: '0 30px',
      },
    });

    export default function Hook() {
      const classes = useStyles();       //**第三步**
      return (
    			&amp;lt;Button className={classes.root}&amp;gt;Hook&amp;lt;/Button&amp;gt;  //**第四步**
    	);
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;3注意事项&quot;&gt;3.注意事项&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;①&lt;/code&gt;引入 flex 布局以及其中布局样式要带有“”&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    CSS
    .sidebar-switch-wrap {
      display: flex;
      justify-content: flex-start;
    }

    JSS
    right: {
        display: &quot;flex&quot;,
        flexDirection: &quot;column&quot;,
    },

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;②&lt;/code&gt;className = &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;root&lt;/code&gt;&lt;/strong&gt; → className=&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{**classes.root**}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;③&lt;/code&gt; &lt;strong&gt;className 写法：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;font-h1-default&quot;&lt;/code&gt; → &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[classes.fontH1Default]&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
//CSS写法：
  className={CX({
    &quot;font-h1-default&quot;: true
    &quot;font-h1-choosen&quot;: item.href === newHref
  })}

//JSS写法：
  className={CX({
    [classes.fontH1Default]: true,
    [classes.fontH1Choosen]: item.href === newHref
  })}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;④&lt;/code&gt;伪类&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
goback: {
    width: 24,
    &quot;&amp;amp;:hover&quot;: {
      backgroundColor: &quot;#F7F6F3&quot;,
      cursor: &quot;pointer&quot;
    },
    &quot;&amp;amp;:active&quot;: {
      backgroundColor: &quot;#DAD9D7&quot;
    }
  },

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;特性&quot;&gt;特性&lt;/h2&gt;

&lt;h3 id=&quot;1-支持嵌套选择器&quot;&gt;1. 支持嵌套选择器&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
const useStyles = makeStyles({
  root: {
    color: 'red',
    '&amp;amp; p': {
      color: 'green',
      '&amp;amp; span': {
        color: 'blue'
      }
    }
  },
});

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;2-支持传入属性&quot;&gt;2. 支持传入属性&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    const useStyles = makeStyles({
      foo: props =&amp;gt; ({
        backgroundColor: props.backgroundColor,
      }),
      bar: {
        color: props =&amp;gt; props.color,
      },
    });

    function MyComponent() {

      const props = { backgroundColor: 'black', color: 'white' };

      const classes = useStyles(props);   //**传入属性**

      return &amp;lt;div className={`${classes.foo} ${classes.bar}`} /&amp;gt;
    }

    **//设置容器固定宽高, 实际项目中使用**

    import React from &quot;react&quot;;
    import { makeStyles } from &quot;@material-ui/styles&quot;;
    const useStyle = makeStyles({
      LyoutContainerTB: newType =&amp;gt; ({
        display: &quot;flex&quot;,
        alignItems: &quot;center&quot;,
        width: &quot;100%&quot;,
        paddingTop: newType.paddingTop,
        paddingBottom: newType.paddingBottom
      })
    });

    function LyoutContainerTB(props) {
      const { type, children } = props;
      const newType = { paddingTop: type, paddingBottom: type };
      const classes = useStyle(newType);
      return &amp;lt;div className={`${classes.LyoutContainerTB}`}&amp;gt;{children}&amp;lt;/div&amp;gt;;
    }
    export default LyoutContainerTB;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;高级用法&quot;&gt;高级用法&lt;/h2&gt;

&lt;h3 id=&quot;字符串模板&quot;&gt;字符串模板&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;如果你喜欢用 css 语法而不是 jss, 那么可以使用规则
&lt;a href=&quot;https://cssinjs.org/jss-plugin-template/?v=v10.0.3&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jss-plugin-template&lt;/code&gt;&lt;/a&gt;插入 css 语法&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
const useStyles = makeStyles({
    root: `font-size: 16px; border: 0; color: white; height: 48px; padding: 0 30px; box-shadow: 0 3px 5px 2px rgba(255, 105, 135, 0.3);`,
    '@media print': {
    button: `color: black`
    },
    '@keyframes id': {
    from: `opacity: 0`,
    to: `opacity: 1`
    }
});

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>ma_meng</name></author><category term="Material-UI" /><category term="Google-UI" /><summary type="html"></summary></entry><entry><title type="html">HTML5的元素嵌套规则</title><link href="http://localhost:4000/2020/01/01/babel.html" rel="alternate" type="text/html" title="HTML5的元素嵌套规则" /><published>2020-01-01T20:00:21+08:00</published><updated>2020-01-01T20:00:21+08:00</updated><id>http://localhost:4000/2020/01/01/babel</id><content type="html" xml:base="http://localhost:4000/2020/01/01/babel.html">&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;babel-之-babel-polyfillbabel-runtimetransform-runtime-详解&quot;&gt;Babel 之 babel-polyfill、babel-runtime、transform-runtime 详解&lt;/h1&gt;

&lt;p&gt;引言&lt;/p&gt;

&lt;h3 id=&quot;babel-默认只转换新的-javascript-语法比如箭头函数扩展运算spread&quot;&gt;babel 默认只转换新的 JavaScript 语法，比如箭头函数、扩展运算（spread）。&lt;/h3&gt;

&lt;p&gt;不转换新的 API，例如 Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise 等全局对象，以及一些定义在全局对象上的方法（比如 Object.assign）都不会转译。如果想使用这些新的对象和方法，则需要为当前环境提供一个垫片（polyfill）。&lt;/p&gt;

&lt;p&gt;此篇仅对三种 polyfill 进行介绍，并讲了他们的安装配置。具体的每种对新语法的转换结果，可以看参考链接的第一个。&lt;/p&gt;

&lt;h2 id=&quot;三种-polyfill-介绍&quot;&gt;三种 polyfill 介绍&lt;/h2&gt;

&lt;h2 id=&quot;babel-polyfill&quot;&gt;babel-polyfill&lt;/h2&gt;

&lt;p&gt;目前最常用的配合 Babel 一起使用的 polyfill 是 babel-polyfill，通过改写全局 prototype 的方式实现，它会加载整个 polyfill，针对编译的代码中新的 API 进行处理，并且在代码中插入一些帮助函数，比较适合单独运行的项目。&lt;/p&gt;

&lt;p&gt;babel-polyfill 解决了 Babel 不转换新 API 的问题，但是直接在代码中插入帮助函数，会导致污染了全局环境，并且不同的代码文件中包含重复的代码，导致编译后的代码体积变大。虽然这对于应用程序或命令行工具来说可能是好事，但如果你的代码打算发布为供其他人使用的库，或你无法完全控制代码运行的环境，则会成为问题。&lt;/p&gt;

&lt;h1 id=&quot;babel-runtime&quot;&gt;babel-runtime&lt;/h1&gt;

&lt;p&gt;Babel 为了解决上述问题，提供了单独的包 babel-runtime 用以提供编译模块的工具函数，启用插件 babel-plugin-transform-runtime 后，Babel 就会使用 babel-runtime 下的工具函数。&lt;/p&gt;

&lt;p&gt;babel-runtime 插件能够将这些工具函数的代码转换成 require 语句，指向为对 babel-runtime 的引用。每当要转译一个 api 时都要手动加上 require(‘babel-runtime’)。简单说 babel-runtime 更像是一种按需加载的实现，比如你哪里需要使用 Promise，只要在这个文件头部 require Promise from ‘babel-runtime/core-js/promise’就行了&lt;/p&gt;

&lt;p&gt;不过如果你许多文件都要使用 Promise，难道每个文件都要 import 一遍不成？&lt;/p&gt;

&lt;p&gt;babel-plugin-transform-runtime#
为了方便使用 babel-runtime，解决手动 require 的苦恼。它会分析我们的 ast 中，是否有引用 babel-rumtime 中的垫片（通过映射关系），如果有，就会在当前模块顶部插入我们需要的垫片。&lt;/p&gt;

&lt;p&gt;transform-runtime 是利用 plugin 自动识别并替换代码中的新特性，你不需要再引入，只需要装好 babel-runtime 和 配好 plugin 就可以了。&lt;/p&gt;

&lt;p&gt;好处是按需替换，检测到你需要哪个，就引入哪个 polyfill，如果只用了一部分，打包完的文件体积对比 babel-polyfill 会小很多。而且 transform-runtime 不会污染原生的对象，方法，也不会对其他 polyfill 产生影响。&lt;/p&gt;

&lt;p&gt;所以 transform-runtime 的方式更适合开发工具包，库，一方面是体积够小，另一方面是用户（开发者）不会因为引用了我们的工具，包而污染了全局的原生方法，产生副作用，还是应该留给用户自己去选择。&lt;/p&gt;

&lt;h1 id=&quot;-比较&quot;&gt;⭐ 比较&lt;/h1&gt;

&lt;p&gt;babel-polyfill 与 babel-runtime 相比虽然有各种缺点，但在某些情况下仍然不能被 babel-runtime 替代， 例如，&lt;/p&gt;

&lt;p&gt;[1, 2, 3].includes(3)，Object.assign({}, {key: ‘value’})，Array，Object 以及其他”实例”下 es6 的方法，babel-runtime 是无法支持的， 因为 babel-runtime 只支持到 static 的方法。&lt;/p&gt;

&lt;h1 id=&quot;安装配置&quot;&gt;安装配置&lt;/h1&gt;

&lt;p&gt;babel-polyfill#
因为这是一个 polyfill （它需要在你的源代码之前运行），我们需要让它成为一个 dependency，而不是一个 devDependency 。&lt;/p&gt;

&lt;p&gt;npm install –save babel-polyfill&lt;/p&gt;

&lt;p&gt;直接在代码中 require，或者在 webpack 的 entry 中添加，也可以在 babel 的 env 中设置 useBuildins 为 true 来开启。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//示例：vue-cli 脚手架中使用&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;babel-polyfill&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//示例：webpack 的 entry 中添加&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;common&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;`babel-polyfill`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;`whatwg-fetch`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;`react`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;`react-dom`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;`redux`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;`react-redux`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;`js-cookie`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;babel-runtime 和 babel-plugin-transform-runtime#
在大多数情况下，你应该安装 babel-plugin-transform-runtime 作为开发依赖（使用 –save-dev），并且将 babel-runtime 作为生产依赖（使用 –save）。这个看 vue-cli 生成的 package.json 就能发现。&lt;/p&gt;

&lt;p&gt;因为 babel 编译 es6 到 es5 的过程中，babel-plugin-transform-runtime 这个插件会自动 polyfill es5 不支持的特性，这些 polyfill 包就是在 babel-runtime 这个包里（core-js 、regenerator 等）&lt;/p&gt;

&lt;p&gt;npm install –save-dev babel-plugin-transform-runtime&lt;/p&gt;

&lt;p&gt;npm install –save babel-runtime&lt;/p&gt;

&lt;p&gt;用法#
通过 .babelrc（推荐）&lt;/p&gt;

&lt;p&gt;将以下内容添加到你的 .babelrc 文件中：&lt;/p&gt;

&lt;p&gt;未包含选项：&lt;/p&gt;

&lt;p&gt;Copy
{
“plugins”: [“transform-runtime”]
}
包含选项:&lt;/p&gt;

&lt;p&gt;Copy
{
“plugins”: [
[“transform-runtime”, {
“helpers”: false,
“polyfill”: false,
“regenerator”: true,
“moduleName”: “babel-runtime”
}]
]
}
选项# 1.辅助(helpers)&lt;/p&gt;

&lt;p&gt;默认值是:true&lt;/p&gt;

&lt;p&gt;表示是否开启内联的 babel helpers(即 babel 或者环境本来的存在的垫片或者某些对象方法函数)(clasCallCheck,extends,etc)在调用模块名字(moduleName)时将被替换名字。&lt;/p&gt;

&lt;p&gt;2.垫片/polyfill&lt;/p&gt;

&lt;p&gt;默认值是:`true’&lt;/p&gt;

&lt;p&gt;表示是否把内置的东西(Promise,Set,Map,tec)转换成非全局污染垫片。&lt;/p&gt;

&lt;p&gt;3.重新生成/regenerator&lt;/p&gt;

&lt;p&gt;默认值是:true&lt;/p&gt;

&lt;p&gt;是否开启 generator 函数转换成使用 regenerator runtime 来避免污染全局域。&lt;/p&gt;

&lt;p&gt;4.模块名字/moduleName&lt;/p&gt;

&lt;p&gt;默认值:babel-runtime&lt;/p&gt;

&lt;p&gt;当调用辅助（内置垫片）设置模块（module）名字/路径.&lt;/p&gt;

&lt;p&gt;例子：&lt;/p&gt;

&lt;p&gt;Copy
{
“moduleName”: “flavortown/runtime”
}
Copy
import extends from ‘flavortown/runtime/helpers/extends’;
优点#
不会污染全局变量&lt;/p&gt;

&lt;p&gt;多次使用只会打包一次&lt;/p&gt;

&lt;p&gt;依赖统一按需引入,无重复引入,无多余引入&lt;/p&gt;

&lt;p&gt;缺点#
不支持实例化的方法，例 Array.includes(x) 就不能转化&lt;/p&gt;

&lt;p&gt;如果使用的 API 用的次数不是很多，那么 transform-runtime 引入 polyfill 的包会比不是 transform-runtime 时大&lt;/p&gt;

&lt;p&gt;随着应用的增大，相同的 polyfill 每个模块都要做重复的工作（检测，替换），虽然 polyfill 只是引用，编译效率不够高效。&lt;/p&gt;

&lt;p&gt;参考链接#
Babel 用法 | usages transform-runtime&lt;/p&gt;

&lt;p&gt;小毛蛋_对 babel-transform-runtime，babel-polyfill 的一些理解&lt;/p&gt;

&lt;p&gt;zackxizi babel-runtime 和 babel-polyfill 的作用介绍和使用&lt;/p&gt;

&lt;p&gt;babel-polyfill、babel-runtime 的选择&lt;/p&gt;</content><author><name>ma_meng</name></author><category term="HTML5" /><category term="标签" /><summary type="html"></summary></entry><entry><title type="html">14款Mac外接显卡</title><link href="http://localhost:4000/2019/12/26/R9-Nano.html" rel="alternate" type="text/html" title="14款Mac外接显卡" /><published>2019-12-26T20:00:21+08:00</published><updated>2019-12-26T20:00:21+08:00</updated><id>http://localhost:4000/2019/12/26/R9-Nano</id><content type="html" xml:base="http://localhost:4000/2019/12/26/R9-Nano.html">&lt;h2 id=&quot;配置&quot;&gt;配置&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191228010832281.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b2thaWdkZw==,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;电脑： MacBook Pro (13-inch Retina Mid 2014)&lt;/li&gt;
  &lt;li&gt;系统macOS Catalina 10.15.2&lt;/li&gt;
  &lt;li&gt;拓展坞：技嘉 Gaming Box&lt;/li&gt;
  &lt;li&gt;显卡： R9 nano&lt;/li&gt;
  &lt;li&gt;线材：雷电2转雷电2 + 雷电3转雷电3(如果你电脑有雷电3直接可以连接)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-安装&quot;&gt;📦 安装&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;关机, 然后开机按住Command + R 进入恢复模式&lt;/li&gt;
  &lt;li&gt;在恢复模式中打开终端 输入以下命令关闭sip
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;csrutil disable
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;重启电脑&lt;/li&gt;
  &lt;li&gt;下载安装驱动, 终端中输入以下命令&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -o ~/Desktop/automate-eGPU.sh https://raw.githubusercontent.com/goalque/automate-eGPU/master/automate-eGPU.sh &amp;amp;&amp;amp; chmod +x ~/Desktop/automate-eGPU.sh &amp;amp;&amp;amp; cd ~/Desktop &amp;amp;&amp;amp; sudo ./automate-eGPU.sh

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;重启电脑&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;如果上面安装驱动失败-尝试下面安装方式-如果成功就不用了&quot;&gt;如果上面安装驱动失败, 尝试下面安装方式, 如果成功就不用了&lt;/h4&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo curl -s &quot;https://api.github.com/repos/mayankk2308/purge-wrangler/releases/latest&quot; | grep '&quot;browser_download_url&quot;:' | sed -E 's/.*&quot;([^&quot;]+)&quot;.*/\1/' | xargs curl -L -s -0 &amp;gt; purge-wrangler.sh &amp;amp;&amp;amp; chmod +x purge-wrangler.sh &amp;amp;&amp;amp; ./purge-wrangler.sh &amp;amp;&amp;amp; rm purge-wrangler.sh

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;如果有问题-微博私聊我家猫叫佩奇&quot;&gt;如果有问题 微博私聊@我家猫叫佩奇&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;成功之后如图所示&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191228011126182.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b2thaWdkZw==,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;amd-yes&quot;&gt;AMD Yes&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191228011133684.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b2thaWdkZw==,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191228011134765.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b2thaWdkZw==,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191228011145587.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b2thaWdkZw==,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191228011150882.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b2thaWdkZw==,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/2019122801115217.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b2thaWdkZw==,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191228011200597.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b2thaWdkZw==,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191228011206374.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b2thaWdkZw==,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot; /&gt;&lt;/p&gt;</content><author><name>ma_meng</name></author><category term="技嘉" /><category term="AMD" /><category term="R9" /><category term="nano" /><summary type="html">配置</summary></entry><entry><title type="html">图解absolute relative</title><link href="http://localhost:4000/2019/12/10/absolute-relative.html" rel="alternate" type="text/html" title="图解absolute relative" /><published>2019-12-10T20:00:21+08:00</published><updated>2019-12-10T20:00:21+08:00</updated><id>http://localhost:4000/2019/12/10/absolute-relative</id><content type="html" xml:base="http://localhost:4000/2019/12/10/absolute-relative.html">&lt;p&gt;1. Absolute：绝对定位，是相对于最近的且不是static定位的父元素来定位&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2. Fixed：绝对定位，是相对于浏览器窗口来定位的，是固定的，不会跟屏幕一起滚动。

3. Relative：相对定位，是相对于其原本的位置来定位的。

4. Static：默认值，没有定位。

5. Inherit：继承父元素的position值。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;初始设置四个div&quot;&gt;初始设置四个div&lt;/h1&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;body&amp;gt;
	&amp;lt;div class=&quot;sun1&quot;&amp;gt;sun1&amp;lt;/div&amp;gt;
	&amp;lt;div class=&quot;sun2&quot;&amp;gt;sun22222&amp;lt;/div&amp;gt;
	&amp;lt;div class=&quot;sun3&quot;&amp;gt;sun3&amp;lt;/div&amp;gt;
	&amp;lt;div class=&quot;sun4&quot;&amp;gt;sun4&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191220223426701.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b2thaWdkZw==,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot; /&gt;&lt;/p&gt;
&lt;h1 id=&quot;1-子元素absolute&quot;&gt;1. 子元素absolute&lt;/h1&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.sun2{
    position: absolute;
    height: 100px;
    left: 50px;
    top: 50px;
    background-color:cadetblue
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;第二个元素设置absolute, 脱离文档流，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;宽度由文字sun2222撑开&lt;/code&gt;，top跟left根元素即html元素来定位&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/2019122022370518.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b2thaWdkZw==,size_16,color_FFFFFF,t_70&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;2子元素relative&quot;&gt;2.子元素relative&lt;/h1&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.sun2{
    position: relative;
    height: 100px;
    left: 50px;
    top: 50px;
    background-color:cadetblue
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;设置relative的div不会影响其他div的位置，且top和left是相对于它原本自身的位置来定位, 宽度还是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;原来父级的宽度&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191220224057962.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b2thaWdkZw==,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;3子元素设置一个父级absolute-子元素absolute&quot;&gt;3.子元素设置一个父级absolute, 子元素absolute&lt;/h1&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.sun{
      position:absolute;
      height: 200px;
      background-color: coral;
    }
    .sun2{
      position: absolute;
      height: 100px;
      left: 50px;
      top: 50px;
      background-color:cadetblue
    }

&amp;lt;div class=&quot;sun1&quot;&amp;gt;sun1&amp;lt;/div&amp;gt;
      &amp;lt;div class=&quot;sun&quot;&amp;gt;
        这里是sun22222的父元素
        &amp;lt;div class=&quot;sun2&quot;&amp;gt;sun22222&amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class=&quot;sun3&quot;&amp;gt;sun3&amp;lt;/div&amp;gt;
      &amp;lt;div class=&quot;sun4&quot;&amp;gt;sun4&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;sun2就会相对于父sun的div来定位。子元素sun 宽度由文字sun22222内容撑开决定&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191220223731219.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b2thaWdkZw==,size_16,color_FFFFFF,t_70&quot; alt=&quot;3-1&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;子元素sun2222 设置一个500px，宽度不会把父元素撑开&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191220223735825.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b2thaWdkZw==,size_16,color_FFFFFF,t_70&quot; alt=&quot;3-2&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;4子元素设置一个父级absolute-子元素relative&quot;&gt;4.子元素设置一个父级absolute, 子元素relative&lt;/h1&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.sun{
      position:absolute;
      height: 200px;
      background-color: coral;
    }
    .sun2{
      position: absolute;
      height: 100px;
      left: 50px;
      top: 50px;
      background-color:cadetblue
    }

.sun{
      position:absolute;
      height: 200px;
      background-color: coral;
    }
    .sun2{
      position: relative;
      height: 100px;
      left: 50px;
      top: 50px;
      background-color:cadetblue
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;sun2就会相对于父sun的div来定位。子元素sun2222 宽度与父元素相同&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191220223750576.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b2thaWdkZw==,size_16,color_FFFFFF,t_70&quot; alt=&quot;4-1&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;父级absolute, 子元素relative，子元素sun2222 设置一个500px，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;**子元素宽度会把父元素撑开**&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191220223756965.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b2thaWdkZw==,size_16,color_FFFFFF,t_70&quot; alt=&quot;4-2&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;5子元素设置一个父级relative-子元素absolute常用&quot;&gt;5.子元素设置一个父级relative, 子元素absolute（常用）&lt;/h1&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.sun{
      position: relative;
      height: 200px;
      background-color: coral;
    }
    .sun2{
      position: absolute;
      height: 100px;
      width: 500px;
      left: 50px;
      top: 50px;
      background-color:cadetblue
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;子元素定位相对于父元素&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191220223759511.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b2thaWdkZw==,size_16,color_FFFFFF,t_70&quot; alt=&quot;5-1&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;子元素定位相对于父元素，子元素设置宽度不会影响父元素&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191220223808736.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b2thaWdkZw==,size_16,color_FFFFFF,t_70&quot; alt=&quot;5-2&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结：&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;absolute: 会脱离文档流 ，定位是相对于离它最近的且不是static定位的父元素而言，若该元素没有设置宽度，则&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;宽度由元素里面的内容决定&lt;/code&gt;，且宽度不会影响父元素，定位为absolution后，原来的位置相当于是空的，下面的的元素会来占据。&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;relative: 不会脱离文档流，定位是相对于原本自身的位置，若没有宽度，那么宽度为父元素宽度，该元素的宽度会影响父元素的的大小&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>ma_meng</name></author><category term="absolute" /><category term="relative" /><summary type="html">1. Absolute：绝对定位，是相对于最近的且不是static定位的父元素来定位 2. Fixed：绝对定位，是相对于浏览器窗口来定位的，是固定的，不会跟屏幕一起滚动。 3. Relative：相对定位，是相对于其原本的位置来定位的。 4. Static：默认值，没有定位。 5. Inherit：继承父元素的position值。</summary></entry><entry><title type="html">使用nwb发布你的第一个npm组件</title><link href="http://localhost:4000/2019/12/02/nwb.html" rel="alternate" type="text/html" title="使用nwb发布你的第一个npm组件" /><published>2019-12-02T20:00:21+08:00</published><updated>2019-12-02T20:00:21+08:00</updated><id>http://localhost:4000/2019/12/02/nwb</id><content type="html" xml:base="http://localhost:4000/2019/12/02/nwb.html">&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191203230246711.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b2thaWdkZw==,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;为什么要开发组件库&quot;&gt;为什么要开发组件库?&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;组件库可以与业务代码完全分开&lt;/li&gt;
  &lt;li&gt;可以独立进行开发，方便维护和拓展&lt;/li&gt;
  &lt;li&gt;组件具有独立性，组件之间可自由组合&lt;/li&gt;
  &lt;li&gt;方排查问题，某个组件出现问题，直接对组件进行处理&lt;/li&gt;
  &lt;li&gt;可以让多个项目重复又使用，提高前端开发效率和可维护性&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;nwb-是什么&quot;&gt;nwb 是什么?&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;既然组件库有这么多优势，那么如何开发一个组件库?  答案是：nwb， nwb是一个非常优秀的组件库开发工具：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;nwb用来开发组件库 (常用的组件库比如Bootstrap，AntDesign)&lt;/li&gt;
  &lt;li&gt;即装即用，无需配置， 简单易上手&lt;/li&gt;
  &lt;li&gt;可以直接发布到npm/cnpm&lt;/li&gt;
  &lt;li&gt;可独立进行单元测试，保证代码健壮性&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;官方文档：&lt;/strong&gt; &lt;a href=&quot;https://github.com/insin/nwb&quot;&gt;insin/nwb&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;nwb安装&quot;&gt;nwb安装&lt;/h1&gt;

&lt;h2 id=&quot;安装之前的准备&quot;&gt;安装之前的准备&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;电脑装有：npm / cnpm / yarn
```
// cnpm 安装: cnpm是企业级npm私服，淘宝团队做了国内完整npm镜像叫cnpm,每次10分钟跟npm官网同步一次, 
// npm服务器在国外，cnpm服务器在国内，cnpm替代npm安装可提高安装速度&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;npm install -g cnpm –registry=https://registry.npm.taobao.org&lt;/p&gt;

&lt;p&gt;//yarn 安装：Yarn是facebook发布的一款取代npm的包管理工具&lt;/p&gt;

&lt;p&gt;npm install -g yarn  或者  brew install yarn&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;## 开始安装

- 全局安装nwb, 使用npm或者cnpm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;npm install -g nwb  //全局安装nwb&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- npm失败或者非常慢， 可以尝试使用cnpm安装，cnpm速度比较快
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;cnpm install -g nwb  //全局安装nwb&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 使用nwb创建组件 

- nwb创建一个名字叫nwb-demo的项目，名字自己随意取， 这里取名nwb-demo只是做demo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;nwb new react-component nwb-demo&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- 之后问关于配置问题
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;? Do you want to create an ES modules build for use by compatible bundlers? (Y/n)
// 回复Y ，询问是否创建 ES modules&lt;/p&gt;

&lt;p&gt;Do you want to create a UMD build for global usage via &lt;script&gt; tag? (y/N)
// 回复Y，创建 UMD&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;? Which global variable should the UMD build set? ()
//回复ReactLoadingButton, 一般用React社区约定模块名称TitleCase版本，ReactLoadingButton&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
- 之后自动创建文件 , 其中着重关注 `demo`   `src /index.js`    `tests`   `neb.config.js`
```js
nwb-demo
  .gitignore
  .travis.yml
  CONTRIBUTING.md
  nwb.config.js  //调整拓展nwb提供的默认配置
  package.json
  README.md
  demo/         //demo文件夹，协助开发组件模块，不会打包进npm包
    src/
      index.js
  node_modules/
  src/
    index.js    //构建自己的react组件模块
  tests/        //组件测试模块
    *.eslintrc*
    index-test.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;创建单个组件&quot;&gt;&lt;strong&gt;创建单个组件&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;进入刚刚创建的 nwb-demo 文件
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd nwb-demo 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;在nwb-demo 项目里有一个demo( ./demo/src/index.js )文件，这个文件可以用来创建演示应用的，（你可以把他认为是一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;父组件&lt;/code&gt;）你的组件可以在这个demo中测试，如果不需要可以放心的删除 （以下创建一个Button为例说明）
```js
//.demo/src/index.js
import React, {Component} from ‘react’
import {render} from ‘react-dom’
import Button from ‘../../src/index’;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;class Demo extends Component {
  handleClick =  ()=&amp;gt; {
    console.log(“已点击”);
  }
  render() {
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;Button 
          onClick = {()=&amp;gt;{this.handleClick()}} 
          disabled = {false}
        &amp;gt;
          登陆
        &amp;lt;/Button&amp;gt;
        &amp;lt;Button disabled = {true} &amp;gt;禁用&amp;lt;/Button&amp;gt;
        &lt;button&gt;&lt;/button&gt;
      &amp;lt;/div&amp;gt;
    )
  }
}
render(&lt;Demo&gt;&lt;/Demo&gt;, document.querySelector(‘#demo’))&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;**安装classnames:  类选择器，react官方推荐库，用来动态判断不同状态class（类名）**

 **官方文档：** [JedWatson/classnames](https://github.com/JedWatson/classnames)

- 安装方式：
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;npm install classnames –save&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
- 还有一个./src/index.js文件，这个是自己开发组件的文件（你可以把他认为是一个`子组件`）
```js
//./src/index.js
import React, {Component} from 'react';
import PropTypes from 'prop-types';
import CX from 'classnames';
import './index.css';

class Button extends Component {
  render() {
    const { children, onClick, disabled, ...props} = this.props;
    return (
      &amp;lt;span
        className = {CX({
          btn:true,
          &quot;btn-disabled&quot;: disabled === true ,
        })}
				{...props}
      &amp;gt;
        &amp;lt;span className = 'btn-content'&amp;gt;
          {children}
        &amp;lt;/span&amp;gt;
      &amp;lt;/span&amp;gt;
    )
  }
}

Button.propTypes = {
  children: PropTypes.string,
  onClick: PropTypes.func,
  disabled: PropTypes.bool,
}
Button.defaultProps = {
  children:&quot;Button&quot;,
  onClick: () =&amp;gt; {return null},
  disabled : false,
}
export default Button

//./src/index.css 
.btn{
    display: flex;
    align-self: center;
    justify-content: center;
    width:56px;
    height:32px;
    border-radius:4px;
    background:rgba(46,170,220,1);
}
.btn:hover{
    background:rgba(7,156,205,1);
    cursor: pointer;
}

.btn:active{
    background:rgba(2,141,190,1);
    opacity: 0.5;
}

.btn-disabled{
    background:rgba(0,0,0,0.4);
    pointer-events: none;
}

.btn-content{
    font-size:12px;
    font-weight:600;
    color:rgba(255,255,255,1);
    line-height:32px;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;运行单个组件
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm start
//Compiled successfully in 2854 ms.
//The app is running at http://localhost:3000/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;之后浏览器打开 &lt;a href=&quot;http://localhost:3000/&quot;&gt;http://localhost:3000/&lt;/a&gt; , 你就可以看到你写的这个Button组件了&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;创建组件库&quot;&gt;&lt;strong&gt;创建组件库&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;以上步骤都顺利的话，这时候你已经成功写出一个button组件了，那么接下来实现一个更有意思的东西：组件库，其实不难就是多个组件的集合， 跟上面创建的单一组件区别是，以前  ./src/index.js 里面放的是一个具体button组件代码，那现在要实现组件库功能， 只需要把原来./src/index.js 里面的组件代码换成export组件集合就可以了（export写法如下）， 这里推荐每个组件单独写到一个文件夹中。&lt;/li&gt;
  &lt;li&gt;可以参考我的层级结构， 每个组件建立一个文件夹 比如Button，Input ，然后把之前Button中的index.js跟index.css 都放到新建的Button文件中，Input 文件自己可以随便写一个， 比如下面这样：
```js
//../src/Input/index.js
import React, {Component} from ‘react’;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;class Input extends Component {
  render() {
    return (
      &lt;span&gt;&lt;br /&gt;
        hello
      &lt;/span&gt;
    )
  }
}&lt;/p&gt;

&lt;p&gt;export default Input;&lt;/p&gt;

&lt;p&gt;//../src/Input/index.css
暂时可以什么都不写， 就放一个空index.css&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- 我的层级结构：

![](https://user-gold-cdn.xitu.io/2019/12/11/16ef4776e762efc9?w=672&amp;amp;h=436&amp;amp;f=png&amp;amp;s=43575)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;//此时的 ./src/index.js 是这样的， 里面是export出的组价集合
export Button from “./Button/index.js”;
export Input from ‘./Input/index.js’;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;**`切记 切记 切记`** 记得引用路径一定要写对， `因为打包只打包src内部文件`，引用的路径不能超出src文件范围，也不能包含src，举例来说明下：
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;//错误写法，以下写法本地测试没有问题，但是打包完成之后就会将src路径一起打包进去，
//会导致用户下载的npm包，使用时候会因为找不到src文件路径报错，
~~export Input from ‘../src/Input/index.js’; ~~&lt;/p&gt;

&lt;p&gt;//正确写法，不包src路径
export Button from “./Button/index.js”;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- 这时候你的Demo父组件就可以直接用组件库里面两个组件了,
```js
    //import Button from '../../src/index';改成下面是
    import {Button ,Input} from '../../src/index.js';
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;运行自己写的组件库
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nx&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;
    
  &lt;span class=&quot;c1&quot;&gt;// Compiled successfully in 2013 ms.&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// The app is running at http://localhost:3000/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;出现以上运行结果恭喜你，你已经成功完成一个了组件库，接下来就是考虑如何发布到npm， 让大家都可以使用你的组件库&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;npm账号登陆&quot;&gt;NPM账号登陆&lt;/h1&gt;

&lt;h3 id=&quot;npm账号注册&quot;&gt;npm账号注册&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;注册网址： &lt;a href=&quot;https://www.npmjs.com/login&quot;&gt;https://www.npmjs.com/&lt;/a&gt;  , 然后记下你的Username/ Password / Email  之后终端登陆npm账号要用到&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;npm账号登录&quot;&gt;npm账号登录&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm login 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Username: ma_memg       //输入用户名
Password:               //输入密码
Email: (this IS public) //输入注册邮箱
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;不放心可以用一下命令查一下当前npm账户是谁
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm who am i
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;查看结果：&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/12/11/16ef47d8df2e2345?w=1398&amp;amp;h=168&amp;amp;f=png&amp;amp;s=78094&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;发布到npm&quot;&gt;发布到npm&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;发布流程是先npm run build 然后 npm publish，以下详细步骤：&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;组件构建-npm--run-build&quot;&gt;组件构建 npm  run build&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;– –copy-files ：可将css打包进npm包( 默认是不打包css文件的 )修改 package.json 中的build, 修改 package. json 中“build”部分， 在后面添加一个– –copy-files
```
//package.json&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;“scripts”: {
-&amp;gt;    “build”: “nwb build-react-component –copy-files”,
},&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;`注意 注意 注意` 发布之前确认跟上次版本号不一样，且比上一次版本号要更高， 不然会因为版本号重复或者变低导致报错，版本号在package.json中修改如下图：
![](https://user-gold-cdn.xitu.io/2019/12/11/16ef47efff04a9ae?w=904&amp;amp;h=462&amp;amp;f=png&amp;amp;s=56864)
```js
//package.json
{
-&amp;gt;  &quot;name&quot;: &quot;yunshang&quot;,   //输入自己组件名称 
-&amp;gt;  &quot;version&quot;: &quot;1.0.1&quot;,   //每次推到npm前确保跟上次版本号不同
-&amp;gt;  &quot;description&quot;: &quot;button&quot;,  //简单描述项目
    ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;接下来运行npm run build 开始编译的组件
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  npm run build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;build之后会多出四个文件
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;lib：你开发的依赖模块
es： 块构建保留使用import和export语句在代码中，但将所有其他内容转为ES5
umd：在script标签中引用时使用（配置过会有，没有配置生成umd）
demo/dist： 演示使用，此部分不会推到npm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;h2 id=&quot;组件推送-npm-publish&quot;&gt;组件推送 npm publish&lt;/h2&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm publish
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;发布成功： （npm publish包括了npm run build）&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/12/11/16ef480cb9b73410?w=1500&amp;amp;h=2016&amp;amp;f=png&amp;amp;s=491505&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;上传完成之后， &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;https://www.npmjs.com&lt;/a&gt; 查看有没有发布成功, 搜索nwb-demo可以查到自己发布的就OK了&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/12/11/16ef480ff99f3bd9?w=2582&amp;amp;h=1444&amp;amp;f=png&amp;amp;s=245394&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;删除npm包&quot;&gt;删除npm包&lt;/h1&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm unpublish yunshang --force   //yunshang换成自己组件名称 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h1 id=&quot;使用npm包&quot;&gt;使用npm包&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;在react项目中安装&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;安装&quot;&gt;安装&lt;/h2&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm i yunshang  //yunshang换成自己组件名称 

//npm失败或者非常慢， 可以尝试使用cnpm安装
cnpm i yunshang  //yunshang换成自己组件名称 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;示例&quot;&gt;示例&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;引入样式
```
//引入单个组件
import { Button } from ‘yunshang’;  //yunshang换成自己组件名称&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;//引入多个组件
import { Button, Input } from ‘yunshang’;  //yunshang换成自己组件名称&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;## 使用

值 | 值  | 类型
---|--- | ---
disabled | bool | 默认: false, true为按钮禁用状态
onClick | function | 点击事件
children | string | 按钮内容


# 🌰举个例子

### 在项目中使用这个Button组件
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&amp;lt;Button 
    onClick = {()=&amp;gt;{this.handleClick()}}   //onClick
    disabled = {false}   //disabled&lt;/p&gt;
&lt;blockquote&gt;

  &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;登陆  // children
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;lt;/Button&amp;gt;
```&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/12/11/16ef48583bf6745b?w=690&amp;amp;h=352&amp;amp;f=gif&amp;amp;s=2354559&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>ma_meng</name></author><category term="npm包" /><summary type="html"></summary></entry><entry><title type="html">老人与海 黑科技发布会</title><link href="http://localhost:4000/2019/11/23/luoyonghao.html" rel="alternate" type="text/html" title="老人与海 黑科技发布会" /><published>2019-11-23T20:00:21+08:00</published><updated>2019-11-23T20:00:21+08:00</updated><id>http://localhost:4000/2019/11/23/luoyonghao</id><content type="html" xml:base="http://localhost:4000/2019/11/23/luoyonghao.html">&lt;blockquote&gt;
  &lt;p&gt;11月22日下午,收到了发布会邀请确认 心里想着卧槽又可以听相声了&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191126115712501.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b2thaWdkZw==,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;11月27日下午, 收到发布会门票了了  开心&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191129230918837.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b2thaWdkZw==,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;也不知道 发布啥 一个发布会都不知道发布啥你说有多可怕&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191126115734689.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b2thaWdkZw==,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;倒计时7天&quot;&gt;倒计时7天&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;“这个世界是我们的 也是它们的 但终究…” 这里用了它 难道这次发布会跟动物相关, 要进军宠物领域?? 或者保护大自然???? 越来越好奇了 哈哈&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191126115723845.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b2thaWdkZw==,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;倒计6天&quot;&gt;倒计6天&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;“那些杀不死他们的终将使它们更加……” 连续两天用了它们, 结合之前被曝光的说是新材料, 看来是新材料的可能性真的很大了&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191129230433670.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b2thaWdkZw==,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;倒计5天&quot;&gt;倒计5天&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;“五个朋友一起去吃脏烧烤 为什么受伤的只有…..”  新发布药品???&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191129230430574.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b2thaWdkZw==,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot; /&gt;&lt;/p&gt;</content><author><name>ma_meng</name></author><category term="老罗黑科技" /><summary type="html">11月22日下午,收到了发布会邀请确认 心里想着卧槽又可以听相声了</summary></entry><entry><title type="html">关于 == 你了解够多吗</title><link href="http://localhost:4000/2019/11/22/Double==.html" rel="alternate" type="text/html" title="关于 == 你了解够多吗" /><published>2019-11-22T20:00:21+08:00</published><updated>2019-11-22T20:00:21+08:00</updated><id>http://localhost:4000/2019/11/22/Double==</id><content type="html" xml:base="http://localhost:4000/2019/11/22/Double==.html">&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191126120723522.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b2thaWdkZw==,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;两个等号--进行比较时候-左右两边数据类型不一样的话-则先转为相同数据类型-然后再进行比较&quot;&gt;两个等号 == 进行比较时候, 左右两边数据类型不一样的话, 则先转为相同数据类型, 然后再进行比较&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;1.{} == {} 不相等, 两个对象比较,  因为比较的是堆内存地址&lt;/li&gt;
  &lt;li&gt;2.null == undefined  相等, 如果是 null === undefined 则不相等&lt;/li&gt;
  &lt;li&gt;3.NaN == NaN  不相等  NaN和谁都不相等&lt;/li&gt;
  &lt;li&gt;4.[12] == ‘12’  相等, 对象跟字符串比较是把对象toString转化为字符串之后再比较&lt;/li&gt;
  &lt;li&gt;5.剩余所有情况再比较时候, 都是转为数字(前提是数据类型不一样)
    &lt;ul&gt;
      &lt;li&gt;对象转数字:对象=&amp;gt; 字符串 =&amp;gt; 数字&lt;/li&gt;
      &lt;li&gt;字符串转数字: 字符串=&amp;gt; 数字 , 字符串转数字只要出现一个非数字字符, 结果就是NaN&lt;/li&gt;
      &lt;li&gt;布尔转数字: true =&amp;gt; 1 , false =&amp;gt; 0&lt;/li&gt;
      &lt;li&gt;null转数字: null=&amp;gt;0&lt;/li&gt;
      &lt;li&gt;undefined转数字: undefined=&amp;gt; NaN&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;[12]==true  不相等, 因为[12]=&amp;gt; “12”=&amp;gt; 12, true=&amp;gt; 1, 12!==1&lt;/li&gt;
  &lt;li&gt;[] == false 相等, []=&amp;gt;0 ,false=&amp;gt; 0&lt;/li&gt;
  &lt;li&gt;‘1’== 1   相等, ‘1’=&amp;gt;1&lt;/li&gt;
  &lt;li&gt;true == 2  不相等, true =&amp;gt; 1&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;了解这么多规则有什么用-当然是用来解决问题的啦-知道上述规则之后就可以解决下面这个问题&quot;&gt;了解这么多规则有什么用? 当然是用来解决问题的啦, 知道上述规则之后就可以解决下面这个问题:&lt;/h4&gt;
&lt;p&gt;如何实现输出ok&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;思路, a 可以转成1 也可以转成 2,3 那个类型可这么转换?&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;字符串: 字符串-&amp;gt;数字,所以不可以&lt;/li&gt;
    &lt;li&gt;布尔: boolean不是转成1就是2, 所以也不可以&lt;/li&gt;
    &lt;li&gt;ull跟undefined: 这个就跟不用说 null-&amp;gt;0 undefined=&amp;gt; NaN&lt;/li&gt;
    &lt;li&gt;对象: 也就剩下这个了, 正好这个就可以实现, a首先要转成string然后转number跟 1 2 3对比, 要是调用原型上的方法肯定不行, 因为转成数字之后, 数字就固定了, 这个数字是不会改变的, 怎么办
只能自己写一个a对象的私有属性方法代替原型上的方法, 这样就可以控制toSring改变了,No bb Show you code&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//写一个私有属性方法&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;还有一种更骚的操作, 直接替换原型上toSting方法, 项目上不建议这么干, 修改原型上方法是大忌, 容易翻车
  这里学习就无所谓了, 思路是: 使用shift方法, 每次调用弹出数字第一个数字, 或者使用pop&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>ma_meng</name></author><category term="==" /><category term="原型方法" /><summary type="html"></summary></entry><entry><title type="html">Linux不香吗</title><link href="http://localhost:4000/2019/11/21/linux.html" rel="alternate" type="text/html" title="Linux不香吗" /><published>2019-11-21T20:00:21+08:00</published><updated>2019-11-21T20:00:21+08:00</updated><id>http://localhost:4000/2019/11/21/linux</id><content type="html" xml:base="http://localhost:4000/2019/11/21/linux.html">&lt;h3 id=&quot;linux-常用指令集合-赶紧打印出来贴在电脑上-哈哈&quot;&gt;Linux 常用指令集合 赶紧打印出来贴在电脑上 哈哈&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191122021028864.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b2thaWdkZw==,size_16,color_FFFFFF,t_70&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>ma_meng</name></author><category term="Linux指令" /><summary type="html">Linux 常用指令集合 赶紧打印出来贴在电脑上 哈哈</summary></entry></feed>